name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: mcp-dev-mcp-server
  ECS_SERVICE: mcp-dev-service
  ECS_CLUSTER: mcp-dev-cluster
  CONTAINER_NAME: mcp-server

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format with black
      run: |
        black --check .
    
    - name: Run unit tests
      run: |
        python -m pytest tests/unit -v --cov=./ --cov-report=xml
      env:
        S3_BUCKET_NAME: test-bucket

  deploy:
    name: Deploy to ECS
    needs: test
    if: github.ref == 'refs/heads/main'  # Only deploy from main branch
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: GitHubActions-Deploy
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.mcp .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Deploy to ECS
      env:
        ECR_IMAGE_URI: ${{ steps.build-image.outputs.image_uri }}
      run: |
        # Get the task definition
        TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_CLUSTER }}-task --region ${{ env.AWS_REGION }})
        
        # Update the container definitions with the new image
        CONTAINER_DEFINITIONS=$(echo $TASK_DEFINITION | jq --arg IMAGE_URI "$ECR_IMAGE_URI" '
          .taskDefinition.containerDefinitions | 
          map(if .name == "${{ env.CONTAINER_NAME }}" then . + {image: $IMAGE_URI} else . end)'
        )
        
        # Register new task definition
        aws ecs register-task-definition \
          --family ${{ env.ECS_CLUSTER }}-task \
          --container-definitions "$CONTAINER_DEFINITIONS" \
          --network-mode awsvpc \
          --execution-role-arn ${{ secrets.ECS_TASK_EXECUTION_ROLE_ARN }} \
          --cpu 256 \
          --memory 512 \
          --requires-compatibilities FARGATE \
          --region ${{ env.AWS_REGION }}
        
        # Update the service
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --task-definition ${{ env.ECS_CLUSTER }}-task \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}

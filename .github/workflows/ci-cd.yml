name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: mcp-dev-mcp-server
  ECS_SERVICE: mcp-dev-service
  ECS_CLUSTER: mcp-dev-cluster
  CONTAINER_NAME: mcp-server

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Install test dependencies
      run: |
        python -m pip install -r requirements-test.txt

    - name: Run unit tests
      run: |
        python -m pytest
      env:
        S3_BUCKET_NAME: test-bucket
        PYTHONPATH: ${{ github.workspace }}

  deploy:
    name: Deploy to ECS
    needs: test
    if: github.ref == 'refs/heads/main'  # Only deploy from main branch
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.mcp .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Deploy to ECS
      env:
        ECR_IMAGE_URI: ${{ steps.build-image.outputs.image_uri }}
      run: |
        # Check if task definition exists
        if aws ecs describe-task-definition --task-definition ${{ env.ECS_CLUSTER }}-task --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
          # Task definition exists, update it
          echo "Updating existing task definition..."
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_CLUSTER }}-task --region ${{ env.AWS_REGION }})
          
          # Update the container definitions with the new image
          CONTAINER_DEFINITIONS=$(echo $TASK_DEFINITION | jq --arg IMAGE_URI "$ECR_IMAGE_URI" '
            .taskDefinition.containerDefinitions | 
            map(if .name == "${{ env.CONTAINER_NAME }}" then . + {image: $IMAGE_URI} else . end)'
          )
        else
          # Task definition doesn't exist, create a new one
          echo "Creating new task definition..."
          CONTAINER_DEFINITIONS=$(cat <<EOL
          [
            {
              "name": "${{ env.CONTAINER_NAME }}",
              "image": "$ECR_IMAGE_URI",
              "portMappings": [
                {
                  "containerPort": 8080,
                  "hostPort": 8080,
                  "protocol": "tcp"
                }
              ],
              "essential": true,
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/${{ env.ECS_CLUSTER }}",
                  "awslogs-region": "${{ env.AWS_REGION }}",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
          EOL
          )
        fi
        
        # Register new task definition
        aws ecs register-task-definition \
          --family ${{ env.ECS_CLUSTER }}-task \
          --container-definitions "$CONTAINER_DEFINITIONS" \
          --network-mode awsvpc \
          --execution-role-arn ${{ secrets.ECS_TASK_EXECUTION_ROLE_ARN }} \
          --cpu 256 \
          --memory 512 \
          --requires-compatibilities FARGATE \
          --region ${{ env.AWS_REGION }}
        
        # Check if service exists
        if aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }} | grep -q "MISSING"; then
          # Service doesn't exist, create it
          echo "Creating new ECS service..."
          aws ecs create-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.ECS_CLUSTER }}-task \
            --launch-type FARGATE \
            --desired-count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-12345678,subnet-87654321],securityGroups=[sg-12345678],assignPublicIp=ENABLED}" \
            --region ${{ env.AWS_REGION }}
        else
          # Service exists, update it
          echo "Updating existing ECS service..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.ECS_CLUSTER }}-task \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}
        fi
